/*
 ******************************
 * Alloc implementation
 * -----
 * Object Oriented C programming
 *
 * Author: Laurent Deniau, Laurent.Deniau@cern.ch
 *
 * $Id: alloc.c,v 1.1 2005/07/04 13:52:04 ldeniau Exp $
 *
 * For more information, please see:
 * http://cern.ch/Laurent.Deniau/html/ooc/ooc.html
 *
 ******************************
 */

#define USING_OOC

#include <ooc/Object.h>
#include <ooc/ex/eBadAlloc.h>

#include <string.h>

/*
 * Local implementation
 */

static char*
str_dup(const char *str, size_t len)
{
  size_t size = (len ? len : strlen(str))+1;
  char *ptr = ooc_rawalloc(size);

  if (ptr)
    memcpy(ptr, str, size);

  return ptr;
}

/*
 * Global implementation
 */

#if OOC_GC_USE /* GC */

#include OOC_GC_HEADER

void* (*ooc_malloc  )(size_t)              = GC_malloc;
void* (*ooc_rawalloc)(size_t)              = GC_malloc_atomic;
void* (*ooc_realloc )(void*, size_t)       = GC_realloc;
void  (*ooc_free    )(void*)               = GC_free;
char* (*ooc_strdup  )(const char*, size_t) = str_dup;

#else          /* LIBC */

#include <stdlib.h>

void* (*ooc_malloc  )(size_t)              = malloc;
void* (*ooc_rawalloc)(size_t)              = malloc;
void* (*ooc_realloc )(void*, size_t)       = realloc;
void  (*ooc_free    )(void*)               = free;
char* (*ooc_strdup  )(const char*, size_t) = str_dup;

#endif

void*
ooc_emalloc(size_t size)
{
  void *ptr = ooc_malloc(size);

  if (!ptr)
    throw(new(eBadAlloc));

  return ptr;
}

void*
ooc_erawalloc(size_t size)
{
  void *ptr = ooc_rawalloc(size);

  if (!ptr)
    throw(new(eBadAlloc));

  return ptr;
}

void*
ooc_erealloc(void *ptr, size_t size)
{
  ptr = ooc_realloc(ptr, size);

  if (!ptr)
    throw(new(eBadAlloc));

  return ptr;
}

char*
ooc_estrdup(const char *str, size_t len)
{
  char *ptr = ooc_strdup(str, len);

  if (!ptr)
    throw(new(eBadAlloc));
  
  return ptr;
}
